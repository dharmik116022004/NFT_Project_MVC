using Humanizer;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis.Scripting;
using Microsoft.Data.SqlClient;
using NuGet.Protocol.Plugins;
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Model;
using System.Runtime.InteropServices;
using System.Xml.Linq;

namespace nft_marketplace.Models
{
    public class contact
    {
        
        SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=nft_marketplace;Integrated Security=True;Connect Timeout=30;Encrypt=False;");
        /*       SqlConnection conn = new SqlConnection(
         "Data Source=(localdb)\\MSSQLLocalDB;" +
         "Initial Catalog=MyAppDB;" +
         "Integrated Security=SSPI;";
       conn.Open(); */

        public int Id { get; set; }

        [Required(ErrorMessage ="Please Enter Name")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Please enter Email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please enter Subject")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Please enter Message")]
        public string Message { get; set; }

       


        public List<contact> getData()
        {
            List<contact> lstEmp = new List<contact>();
            SqlDataAdapter apt = new SqlDataAdapter("select * from Contact", con);
            DataSet ds = new DataSet();
            apt.Fill(ds);
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                lstEmp.Add(new contact
                {
                    Name = dr["Name"].ToString(),
                    Email = dr["Email"].ToString(),
                    Subject = dr["Subject"].ToString(),
                    Message = dr["Message"].ToString(),
                   





                });
            }
            return lstEmp;
        }
        //Retrieve single record from a table
        public contact getData(string Id)
        {
            contact emp = new contact();
            SqlCommand cmd = new SqlCommand("select * from Contact where id='" + Id +
           "'", con);

            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                while (dr.Read())
                {
                    emp.Name = dr["Name"].ToString();
                    emp.Email = dr["Email"].ToString();
                    emp.Subject = dr["Subject"].ToString();
                    emp.Message = dr["Message"].ToString();
                    
                }
            }
            con.Close();
            return emp;
        }

        public bool insert(contact Emp)
        {
            // Assuming "Id" is auto-generated by the database, if not, you need to add it as a parameter.
           // string query = "INSERT INTO Contact (Name, Email, Subject, Message) VALUES (@Name, @Email, @Subject, @Message)";

            // Use "using" statement for automatic disposal of SqlConnection
           // using (SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=nft_marketplace;Integrated Security=True;Connect Timeout=30;Encrypt=False;"))
            //{
                // Use "using" statement for SqlCommand to ensure it's disposed properly
                SqlCommand cmd = new SqlCommand("INSERT INTO Contact (Name, Email, Subject, Message) VALUES (@Name, @Email, @Subject, @Message)", con);
                
                    cmd.Parameters.AddWithValue("@Name", Emp.Name);
                    cmd.Parameters.AddWithValue("@Email", Emp.Email);
                    cmd.Parameters.AddWithValue("@Subject", Emp.Subject);
                    cmd.Parameters.AddWithValue("@Message", Emp.Message);
                    





                    con.Open(); // Open connection
                    int i = cmd.ExecuteNonQuery(); // Execute the non-query command
                     if (i == 0)
            {
                return true;
            }
                     // Close connection explicitly here because of the return statement below (though using will ensure closure)

                    return false;
                }
            }


        }


    